from collections import deque

def water_jug_bfs(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque([(0, 0)])
    path = {(0, 0): None}
    
    while queue:
        j1, j2 = queue.popleft()
        
        if j1 == target or j2 == target:
            solution = []
            current = (j1, j2)
            while current is not None:
                solution.append(current)
                current = path[current]
            return solution[::-1]
        
        if (j1, j2) in visited:
            continue
        visited.add((j1, j2))
        
        moves = [
            (jug1_capacity, j2),
            (j1, jug2_capacity),
            (0, j2),
            (j1, 0),
            (j1 - min(j1, jug2_capacity - j2), j2 + min(j1, jug2_capacity - j2)),
            (j1 + min(j2, jug1_capacity - j1), j2 - min(j2, jug1_capacity - j1))
        ]
        
        for new_state in moves:
            if new_state not in visited:
                queue.append(new_state)
                path[new_state] = (j1, j2)
    
    return None

jug1_capacity = 4
jug2_capacity = 3
target = 2

solution = water_jug_bfs(jug1_capacity, jug2_capacity, target)
if solution:
    for step in solution:
        print(step)
else:
    print("No solution found.")
