import heapq

goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
goal_positions = {val: (r, c) for r, row in enumerate(goal_state) for c, val in enumerate(row)}

def manhattan_distance(state):
    return sum(abs(r - goal_positions[val][0]) + abs(c - goal_positions[val][1])
               for r, row in enumerate(state) for c, val in enumerate(row) if val)

def solve_puzzle(start_state):
    def get_neighbors(state):
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            r, c = next((r, c) for r, row in enumerate(state) for c, val in enumerate(row) if val == 0)
            nr, nc = r + dr, c + dc
            if 0 <= nr < 3 and 0 <= nc < 3:
                new_state = [row[:] for row in state]
                new_state[r][c], new_state[nr][nc] = new_state[nr][nc], new_state[r][c]
                yield new_state

    def to_tuple(state):
        return tuple(tuple(row) for row in state)

    open_set = []
    heapq.heappush(open_set, (0 + manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while open_set:
        _, g, state, path = heapq.heappop(open_set)
        if state == goal_state:
            return path
        visited.add(to_tuple(state))
        for neighbor in get_neighbors(state):
            if to_tuple(neighbor) not in visited:
                heapq.heappush(open_set, (g + 1 + manhattan_distance(neighbor), g + 1, neighbor, path + [neighbor]))

start_state = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
solution = solve_puzzle(start_state)
for step in solution:
    print(step)
